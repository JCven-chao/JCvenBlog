import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as l,o as c,c as i,a as n,b as s,d as e,f as t}from"./app-a3284d02.js";const o={},u=t('<h1 id="java-se-笔记-下" tabindex="-1"><a class="header-anchor" href="#java-se-笔记-下" aria-hidden="true">#</a> Java SE 笔记(下)</h1><h3 id="第01章-java简介" tabindex="-1"><a class="header-anchor" href="#第01章-java简介" aria-hidden="true">#</a> 第01章--Java简介</h3><h5 id="_1-jdk结构" tabindex="-1"><a class="header-anchor" href="#_1-jdk结构" aria-hidden="true">#</a> 1. JDK结构</h5><ul><li><p>JDK 是 Java 语言的软件开发工具包 (SDK)</p></li><li><p>JRE 指 Java 运行环境，在JRE里面有两个文件夹bin (jvm 虚拟器) 和lib (类库)</p></li><li><p>JVM 是虚拟机</p></li></ul><h5 id="_2-javaapi文档" tabindex="-1"><a class="header-anchor" href="#_2-javaapi文档" aria-hidden="true">#</a> 2. JavaAPI文档</h5>',5),d={href:"https://docs.oracle.com/javase/8/docs/api/",target:"_blank",rel:"noopener noreferrer"},r={href:"https://docs.oracle.com/en/java/javase/17/docs/api/index.html",target:"_blank",rel:"noopener noreferrer"},k=t(`<hr><h3 id="第02章-基础语法" tabindex="-1"><a class="header-anchor" href="#第02章-基础语法" aria-hidden="true">#</a> 第02章--基础语法</h3><h4 id="_1-文档注释" tabindex="-1"><a class="header-anchor" href="#_1-文档注释" aria-hidden="true">#</a> 1. 文档注释</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/** 
 *  文档注释
 *  <span class="token keyword">@author</span> JCven
 *  <span class="token keyword">@version</span> 1.0
 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文档注释可以被JDK提供的工具javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档</p><p>使用cmd控制台输入<code>javadoc -d mydoc -author -version HelloWorld.java</code></p><h4 id="_2-标识符命名规则" tabindex="-1"><a class="header-anchor" href="#_2-标识符命名规则" aria-hidden="true">#</a> 2. 标识符命名规则</h4><ul><li><p>包名：多单词组成时所有字母均小写，使用.连接.比如：com.jcven.learn</p></li><li><p>类名&amp;接口名：大驼峰式。比如：AaaBbbCcc</p></li><li><p>变量名&amp;方法名：小驼峰式。比如：aaaBbbCcc</p></li><li><p>常量名：多单词组成是所有字母均大写，使用_连接。比如：AAA_BBB_CCC</p></li></ul><h4 id="_3-转义字符" tabindex="-1"><a class="header-anchor" href="#_3-转义字符" aria-hidden="true">#</a> 3. 转义字符</h4><table><thead><tr><th>转义字符</th><th>意义</th><th>ASCII码值</th></tr></thead><tbody><tr><td>\\n</td><td>换行</td><td>10</td></tr><tr><td>\\t</td><td>制表位</td><td>9</td></tr><tr><td>\\r</td><td>回车</td><td>13</td></tr></tbody></table><h4 id="_4-数据类型" tabindex="-1"><a class="header-anchor" href="#_4-数据类型" aria-hidden="true">#</a> 4. 数据类型</h4><ol><li><p>基本数据类型</p><table><thead><tr><th>类型</th><th>占用字节</th></tr></thead><tbody><tr><td>byte</td><td>1</td></tr><tr><td>short</td><td>2</td></tr><tr><td>int</td><td>4</td></tr><tr><td>long</td><td>8</td></tr><tr><td>float</td><td>4</td></tr><tr><td>double</td><td>8</td></tr><tr><td>char</td><td>1</td></tr><tr><td>boolean</td><td>1</td></tr></tbody></table><ul><li><p>整数默认类型是int，long类型需添加&quot;L&quot;后缀</p></li><li><p>小数默认类型是double，float类型必须添加“F”后缀</p></li></ul></li><li><p>引用数据类型</p><ul><li>类 (class)</li><li>接口 (interface)</li><li>数组 ( [ ] )</li></ul></li></ol><h4 id="_5-运算符" tabindex="-1"><a class="header-anchor" href="#_5-运算符" aria-hidden="true">#</a> 5. 运算符</h4><table><thead><tr><th>优先级</th><th>运算符</th><th>结合性</th></tr></thead><tbody><tr><td>1</td><td>() [] {}</td><td>从左向右</td></tr><tr><td>2</td><td>! ~ ++ --</td><td>从右向左</td></tr><tr><td>3</td><td>* / %</td><td>从左向右</td></tr><tr><td>4</td><td>+ -</td><td>从左向右</td></tr><tr><td>5</td><td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td><td>从左向右</td></tr><tr><td>6</td><td>&lt; &lt;= &gt; &gt;= instanceof</td><td>从左向右</td></tr><tr><td>7</td><td>== !=</td><td>从左向右</td></tr><tr><td>8</td><td>&amp;</td><td>从左向右</td></tr><tr><td>9</td><td>^</td><td>从左向右</td></tr><tr><td>10</td><td>|</td><td>从左向右</td></tr><tr><td>11</td><td>&amp;&amp;</td><td>从左向右</td></tr><tr><td>12</td><td>||</td><td>从左向右</td></tr><tr><td>13</td><td>? :</td><td>从右向左</td></tr><tr><td>14</td><td>= += &amp;= |= ^= ~= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td><td>从右向左</td></tr></tbody></table><ul><li><p>i++ 先使用再自增 ++i 先自增再使用</p></li><li><p>逻辑与 &amp; 逻辑或 | 两边都会执行，而短路与短路或只要一边满足，另一半就不执行</p></li><li><p>逻辑异或 ^ (两者不同时，为真)</p></li><li><p>位运算符 (按照二进制，以补码的形式运算)<br> 按位与&amp; 两位全为1是结果为1，否则为0<br> 按位或| 两位有1则结果为1，否则为0<br> 按位异或 ^ 两位不同则结果为1，否则为0<br> 按位取反 ~ 0与1互换</p></li><li><p>按位运算<br> 2 的原码 = 补码为 00000000 00000000 00000000 00000010<br> 3 的原码 = 补码为 00000000 00000000 00000000 00000011<br> 2&amp;3 按位与运算为 00000000 00000000 00000000 00000010</p></li><li><p>算数左移&lt;&lt; 符号位不变，低位补0 本质是*2<br> 算数右移&gt;&gt; 符号位不变，低位溢出，并用符号位补溢出的高位 本质是/2<br> 逻辑右移&gt;&gt;&gt; 低位溢出，高位补0</p></li><li><p>三元运算符 条件表达式? 表达式1 : 表达式2 ；(判断为真则运行表达式1，为假则运行表达式2</p></li></ul><hr><h3 id="第03章-流程控制" tabindex="-1"><a class="header-anchor" href="#第03章-流程控制" aria-hidden="true">#</a> 第03章--流程控制</h3><h4 id="_1-if分支控制" tabindex="-1"><a class="header-anchor" href="#_1-if分支控制" aria-hidden="true">#</a> 1. if分支控制</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token comment">/*条件表达式*/</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//语句</span>
<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token comment">/*条件表达式*/</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//语句</span>
<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
    <span class="token comment">//语句</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-switch分支控制" tabindex="-1"><a class="header-anchor" href="#_2-switch分支控制" aria-hidden="true">#</a> 2. switch分支控制</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token comment">/*表达式*/</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">case</span> 常量<span class="token number">1</span><span class="token operator">:</span>
        <span class="token comment">//语句</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> 常量<span class="token number">2</span><span class="token operator">:</span>
        <span class="token comment">//语句</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        <span class="token comment">//语句</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>表达式类型应与常量类型保持一致，或是可以自动转化为可比较的类型，如字符转int</p></li><li><p>switch表达式的类型只能是byte，short， int，char，enum，String</p></li><li><p>case子句中的值必须为常量不能是变量</p></li></ul><hr><h4 id="_3-for循环" tabindex="-1"><a class="header-anchor" href="#_3-for循环" aria-hidden="true">#</a> 3. for循环</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//语句</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>for循环的变量初始化和循环变量迭代可以写到其他地方，但分号不能省略，即for( ; 循环条件 ; ){}</p></li><li><p>循环初始值可以有多个，但类型要一样，用逗号隔开循环</p></li><li><p>变量迭代也可以有多个，用逗号隔开</p></li></ul><h4 id="_4-while循环" tabindex="-1"><a class="header-anchor" href="#_4-while循环" aria-hidden="true">#</a> 4. while循环</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//循环变量初始化</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token comment">/*循环条件*/</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//循环体</span>
    <span class="token comment">//循环变量迭代</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-do-while循环" tabindex="-1"><a class="header-anchor" href="#_5-do-while循环" aria-hidden="true">#</a> 5. do-while循环</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//循环变量初始化</span>
<span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">do</span><span class="token punctuation">{</span>
    <span class="token comment">//循环体</span>
    <span class="token comment">//循环变量迭代</span>
<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token comment">/*循环条件*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-break语句" tabindex="-1"><a class="header-anchor" href="#_6-break语句" aria-hidden="true">#</a> 6. break语句</h4><ol><li><p>break语句用于终止某个语句块的执行</p></li><li><p>break语句出现在多层嵌套循环中，可以通过标签来指明终止哪一层语句块</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>label1<span class="token operator">:</span><span class="token punctuation">{</span>
    label2<span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">//break; = break label2;</span>
        <span class="token keyword">break</span> label2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>没有指定的break默认退出最近的循环体</p></li></ol><h4 id="_7-continue语句" tabindex="-1"><a class="header-anchor" href="#_7-continue语句" aria-hidden="true">#</a> 7. continue语句</h4><ol><li><p>continue语句用于结束本次循环，继续执行下一次循环</p></li><li><p>continue语句出现在多层嵌套循环中，可以通过标签跳过哪一层循环</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>label1<span class="token operator">:</span><span class="token punctuation">{</span>
    label2<span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token comment">//continue; = continue label2;</span>
        <span class="token keyword">continue</span> label2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>没有指定的continue默认跳过最近的循环体</p></li></ol><h4 id="_8-return语句" tabindex="-1"><a class="header-anchor" href="#_8-return语句" aria-hidden="true">#</a> 8. return语句</h4><ol><li>return用于方法中，会跳出方法</li><li>return用于main中，表示退出程序</li></ol><hr><h3 id="第04章-数组" tabindex="-1"><a class="header-anchor" href="#第04章-数组" aria-hidden="true">#</a> 第04章--数组</h3><h4 id="_1-一维数组" tabindex="-1"><a class="header-anchor" href="#_1-一维数组" aria-hidden="true">#</a> 1. 一维数组</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1. 动态初始化1</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//2. 动态初始化2</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//3. 静态初始化</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>数组中的元素可以是任何数据类型，包括基本类型和引用类型，但不能混用</p></li><li><p>数组创建后没有赋值的会自动赋默认值 int 0; double 0.0; char \\u0000; boolean false; String null;</p></li><li><p>数组属于引用类型，数组型数据属于对象(object)</p></li></ul><h4 id="_2-二维数组" tabindex="-1"><a class="header-anchor" href="#_2-二维数组" aria-hidden="true">#</a> 2. 二维数组</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1. 动态初始化1</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//2. 动态初始化2</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//2. 动态初始化3</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c<span class="token punctuation">;</span>
b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">//3. 静态初始化</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h3 id="第05章-面向对象基础" tabindex="-1"><a class="header-anchor" href="#第05章-面向对象基础" aria-hidden="true">#</a> 第05章--面向对象基础</h3><h4 id="_1-访问修饰符" tabindex="-1"><a class="header-anchor" href="#_1-访问修饰符" aria-hidden="true">#</a> 1. 访问修饰符</h4><table><thead><tr><th style="text-align:center;">访问级别</th><th style="text-align:center;">访问控制修饰符</th><th style="text-align:center;">同类</th><th style="text-align:center;">同包</th><th style="text-align:center;">子类</th><th style="text-align:center;">不同包</th></tr></thead><tbody><tr><td style="text-align:center;">公开</td><td style="text-align:center;">public</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr><tr><td style="text-align:center;">受保护</td><td style="text-align:center;">protect</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">×</td></tr><tr><td style="text-align:center;">默认</td><td style="text-align:center;">无</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td></tr><tr><td style="text-align:center;">私有</td><td style="text-align:center;">private</td><td style="text-align:center;">√</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td><td style="text-align:center;">×</td></tr></tbody></table><h4 id="_2-方法" tabindex="-1"><a class="header-anchor" href="#_2-方法" aria-hidden="true">#</a> 2. 方法</h4><ol><li><p>方法重载</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//java允许同一个类中同名方法的存在，但形参列表不同</span>
<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token keyword">double</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可变参数</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//java允许将同一类的中多个同名同功能但参数个数不同的方法封装成一个方法</span>
<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> nums<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>int... 表示可变参数，类型是int，参数个数不同，可以是0到多个参数</li><li>使用可变参数时可以当做数组使用，即nums可以当做数组</li><li>可变参数的实参可以是数组，即可以传入数组</li><li>可变参数和普通参数一起放在形参列表里，要保证可变参数放在最后</li><li>一个形参列表只能放一个可变参数</li></ul></li><li><p>作用域</p><ul><li><p>全局变量又称属性，作用域是整个类体，有默认值，可以不赋初值</p></li><li><p>局部变量一般是成员方法中的变量，无初值，必须赋值后才能使用</p></li><li><p>属性和局部变量可以重名，遵循就近原则</p></li><li><p>在同一个作用域中变量不能重名，如同一个方法体内的变量不能重名</p></li><li><p>全局变量可以在本类使用，也可以通过对象调用在其他类使用</p></li><li><p>局部变量只能在本类对应的方法中使用</p></li><li><p>全局变量可以加访问修饰符，局部变量不可以加访问修饰符</p></li></ul></li></ol><h4 id="_3-构造方法" tabindex="-1"><a class="header-anchor" href="#_3-构造方法" aria-hidden="true">#</a> 3. 构造方法</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>
    <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">int</span> age<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>构造器的方法名与类名保持一致</li><li>new对象的时候直接通过构造器即可完成属性的初始化</li><li>一个类可以有多个构造器，即构造器重载</li><li>创建对象时，系统会自动调用该类的构造方法</li><li>如果没有定义构造方法，系统会自动生成一个无参默认构造方法</li><li>用户定义了构造方法后，系统默认的构造方法会被覆盖，若使用则需显式定义，即重新定义一个无参构造器</li></ul><h4 id="_4-this关键字" tabindex="-1"><a class="header-anchor" href="#_4-this关键字" aria-hidden="true">#</a> 4. this关键字</h4><ol><li><p>this关键字可以用来访问本类的属性，方法，构造器</p></li><li><p>this用于区分当前类的属性和局部变量</p></li><li><p>访问成员方法的语法是 this.方法名(参数列表);</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//调用f1的第一种方法</span>
        <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用f1的第二种方法</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>访问构造器的语法是 this(参数列表)； (只能在构造器中使用,即在构造器中调用另一个构造器)，且语句放在第一条</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//调用另一个构造器</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>this不能在类定义的外部使用，只能在类定义中的方法中使用</p></li><li><p>this代表当前对象，即哪个对象被调用，this就代表哪个对象</p></li><li><p>this访问本类的属性和方法，若找不到则会在父类中继续查找</p></li></ol><h4 id="_5-包" tabindex="-1"><a class="header-anchor" href="#_5-包" aria-hidden="true">#</a> 5. 包</h4><ol><li><p>打包： package 包名</p></li><li><p>导包： import 包名</p></li><li><p>包的命名规范： com. 公司名. 项目名. 业务模块名</p></li><li><p>导包时加入*代表导入该包下的所有类</p></li></ol><hr><h3 id="第06章-面向对象进阶" tabindex="-1"><a class="header-anchor" href="#第06章-面向对象进阶" aria-hidden="true">#</a> 第06章--面向对象进阶</h3><h4 id="_1-封装" tabindex="-1"><a class="header-anchor" href="#_1-封装" aria-hidden="true">#</a> 1. 封装</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token comment">// 属性</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>
	<span class="token comment">// getter和setter</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>属性私有化并提供getter和setter</li></ul><h4 id="_2-继承" tabindex="-1"><a class="header-anchor" href="#_2-继承" aria-hidden="true">#</a> 2. 继承</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//父类Person</span>
<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment">//子类Student 继承Person类</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>子类继承父类的所有属性和方法</li><li>非私有属性和方法可以在子类直接访问，私有属性和方法不能在子类直接访问，要通过父类公共方法访问</li><li>子类必须调用父类的构造器，完成父类的初始化</li><li>创建子类对象时，任一子类构造器都会先调用父类的无参构造器，若父类没有无参构造器则需要通过super指用特定构造器</li><li>super() 和 this() 都只能放在构造器的第一行，因此两者不能共存在同一个构造器中</li><li>父类构造器的调用不限于直接父类，而是一直追溯到最高父类即Object类</li><li>子类只能继承一个父类，单继承机制</li></ul><h4 id="_3-super关键字" tabindex="-1"><a class="header-anchor" href="#_3-super关键字" aria-hidden="true">#</a> 3. super关键字</h4><ul><li>访问父类属性和方法用 super.属性 super.方法；</li><li>访问父类的属性和方法，但不能访问私有属性和方法</li><li>当子类有和父类的属性和方法重名时，访问父类需要用super</li><li>super访问不限于直接父类，可以直接追溯到顶级父类，若有重名则遵循就近原则</li></ul><h4 id="_4-方法重写" tabindex="-1"><a class="header-anchor" href="#_4-方法重写" aria-hidden="true">#</a> 4. 方法重写</h4><p>子类的一个方法与父类的一个方法名称，返回类型，参数一样，即子类覆盖父类方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;A类的f1()被调用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token comment">//子类重写f1()方法</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;B类的f1()被调用&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>子类方法的参数，方法名要和父类完全一致，返回类型一致或者是父类返回类型的子类</li><li>子类不能缩小父类的方法的访问权限</li></ul><h4 id="_5-多态" tabindex="-1"><a class="header-anchor" href="#_5-多态" aria-hidden="true">#</a> 5. 多态</h4><ol><li><p>方法重载和方法重写就是方法多态的体现</p></li><li><p>一个对象的编译类型和运行类型可以不一致，= 左边的是编译类型，= 右边的是运行类型</p></li><li><p>向上转型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//父类引用指向子类对象</span>
<span class="token keyword">class</span> <span class="token class-name">People</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">People</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token class-name">People</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//可以调用父类的所有成员，但不能调用子类的特有成员</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>向下转型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">)</span>p1<span class="token punctuation">;</span>
<span class="token comment">//向下转型只能强转父类引用，不能强转父类对象，且父类引用必须指向当前目标对象的类型</span>
<span class="token comment">//可以调用子类的所有成员</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>动态绑定机制</p><p>在调用对象方法的时候，该对象会和运行类型绑定，即从运行类型出发</p><p>调用对象属性时没有动态绑定机制，哪里声明哪里使用</p></li><li><p>多态数组</p><p>数组的定义类型为父类类型，里面实际保存的元素为子类类型</p></li><li><p>多态参数</p><p>方法定义的形参为父类类型，实参类型可以是子类类型</p></li></ul></li></ol><h4 id="_6-instanceof关键字" tabindex="-1"><a class="header-anchor" href="#_6-instanceof关键字" aria-hidden="true">#</a> 6. instanceof关键字</h4><p>判断对象的类型是否是xx类型或xx的子类型，返回值为布尔值</p><h4 id="_7-关键字" tabindex="-1"><a class="header-anchor" href="#_7-关键字" aria-hidden="true">#</a> 7. == 关键字</h4><p>判断基本类型，判断值是否相等</p><p>判断引用类型，判断地址是否相等，即判断是否是同一个对象</p><h4 id="_8-equals方法" tabindex="-1"><a class="header-anchor" href="#_8-equals方法" aria-hidden="true">#</a> 8. equals方法</h4><p>Object类的方法，用于判断引用类型，默认判断地址是否相等，子类通常重写该方法，用于判断值是否相等</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//默认判断地址是否相等</span>
a1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span>
    
<span class="token comment">//重写equals方法</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
	<span class="token keyword">int</span> a<span class="token punctuation">;</span>
    <span class="token keyword">double</span> b<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token class-name">A</span> a1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>
        <span class="token keyword">return</span> a <span class="token operator">==</span> a1<span class="token punctuation">.</span>a <span class="token operator">&amp;&amp;</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>b<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第07章-面向对象高级" tabindex="-1"><a class="header-anchor" href="#第07章-面向对象高级" aria-hidden="true">#</a> 第07章--面向对象高级</h3><h4 id="_1-类变量" tabindex="-1"><a class="header-anchor" href="#_1-类变量" aria-hidden="true">#</a> 1. 类变量</h4><p>类变量也叫静态变量/静态属性，是该类所有对象共享的变量，任何一个该类的对象对其访问或修改，均作用在这个变量上</p><p>使用static关键字修饰静态变量</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//访问时使用类名.类变量名</span>
<span class="token class-name">A</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-类方法" tabindex="-1"><a class="header-anchor" href="#_2-类方法" aria-hidden="true">#</a> 2. 类方法</h4><p>类方法也叫静态方法，即使用static修饰的方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token comment">//访问通过类名.方法名或者对象.方法名 调用</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>类方法中无this和super参数</li><li>类方法中只能访问静态变量或静态方法</li><li>普通成员方法可以访问静态和非静态的变量和方法</li></ul><h4 id="_3-代码块" tabindex="-1"><a class="header-anchor" href="#_3-代码块" aria-hidden="true">#</a> 3. 代码块</h4><p>代码块又称初始化块，属于类的中成员，类似于方法，将逻辑语句封装到方法体中，用 { } 围起来</p><p>代码块不用通过对象或类的显式调用，而是加载类的时候隐式调用</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token comment">//静态代码块</span>
    <span class="token keyword">static</span><span class="token punctuation">{</span>
      	<span class="token comment">//语句</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>
    <span class="token comment">//普通代码块</span>
    <span class="token punctuation">{</span>
        <span class="token comment">//语句</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>static修饰的是静态代码块，作用是对类进行初始化，随着类的加载而执行，且只会执行一次</p></li><li><p>类加载的时机：</p><ul><li><p>创建对象实例 (new)</p></li><li><p>创建子类对象实例时，父类也会被加载</p></li><li><p>使用类的静态成员时 (静态属性，静态方法)</p></li></ul></li><li><p>普通代码块，在创建对象实例时，会被隐式调用，创建一次调用一次</p></li><li><p>只使用类的静态成员时，普通代码块不会被执行</p></li><li><p>静态代码块只能调用静态成员，普通代码块可以调用任意成员</p></li><li><p>创建对象时，在一个类的调用顺序：</p><ol><li>调用静态代码块和静态属性初始化</li><li>调用普通代码块和普通属性初始化</li><li>调用构造方法 (隐含了super() 和调用普通代码块，所以优先级最低)</li></ol></li><li><p>当有父类和子类时，调用顺序：</p><ol><li>父类的静态代码块和静态属性</li><li>子类的静态代码块和静态属性</li><li>父类的普通代码块和普通属性</li><li>父类的构造方法</li><li>子类的普通代码块和普通属性</li><li>子类的构造方法</li></ol></li></ol><h4 id="_4-final关键字" tabindex="-1"><a class="header-anchor" href="#_4-final关键字" aria-hidden="true">#</a> 4. final关键字</h4><ol><li><p>final使用方法</p><ol><li><p>final修饰类，则此类不能被别的类所继承</p></li><li><p>final修饰方法，则此方法不可被重写</p></li><li><p>final修饰属性，则此属性不可被修改</p></li><li><p>final修饰局部变量，则此局部变量不能被修改</p></li></ol></li><li><p>final细节</p><ol><li><p>final修饰的属性又叫常量，一般用XX_XX_XX命名</p></li><li><p>final修饰的属性必须在定义的时候赋初值，且之后不能修改</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//三种赋值位置</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token comment">//1. 定义时赋值</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NUM_A</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token comment">//2. 构造器中赋值</span>
	<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NUM_B</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token constant">NUM_B</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//3. 代码块中赋值</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NUM_C</span><span class="token punctuation">;</span>
    <span class="token punctuation">{</span>
        <span class="token constant">NUM_C</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果final修饰的属性是静态的，则只能在定义时和静态代码块中赋值，不能在构造器中赋值</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//两种赋值位置</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token comment">//1. 定义时赋值</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NUM_A</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token comment">//2. 静态代码块中赋值</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">NUM_B</span><span class="token punctuation">;</span>
    <span class="token keyword">static</span><span class="token punctuation">{</span>
        <span class="token constant">NUM_B</span> <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果不是final类，但是含有final方法，该方法不能被重写但可以被继承</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//可以继承父类的final修饰的方法</span>
    <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用sum方法</span>
<span class="token punctuation">}</span>
<span class="token comment">//父类</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//子类</span>
<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>final修饰的类，不需要再用final修饰该类里面的方法</p></li><li><p>final不能修饰构造器</p></li><li><p>final 和static 搭配修饰效率更高，不会导致类加载</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//不会进行类加载就可以直接访问NUM</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">A</span><span class="token punctuation">.</span><span class="token constant">NUM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token constant">NUM</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol></li></ol><h4 id="_5-抽象类" tabindex="-1"><a class="header-anchor" href="#_5-抽象类" aria-hidden="true">#</a> 5. 抽象类</h4><p>abstract修饰的类就是抽象类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//抽象类</span>
<span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token comment">//构造器</span>
    <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
	<span class="token comment">//抽象方法(没有方法体)</span>
    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> eat <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>抽象类不能被实例化，即不可以new一个对象</p></li><li><p>abstract只能修饰类和方法</p></li><li><p>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法，除非它自己本身也是抽象类</p></li><li><p>抽象方法不能使用private final和static修饰</p></li></ul><h4 id="_6-接口" tabindex="-1"><a class="header-anchor" href="#_6-接口" aria-hidden="true">#</a> 6. 接口</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//接口的定义</span>
<span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>
	<span class="token comment">//属性;</span>
    <span class="token comment">//方法;</span>
<span class="token punctuation">}</span>

<span class="token comment">//接口的使用</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">implements</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>
	<span class="token comment">//必须实现接口的抽象方法;	</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>接口不能被实例化</p></li><li><p>接口中所有方法都是public方法，接口中的抽象方法可以不用abstract修饰</p></li><li><p>一个普通类实现接口，需要将该接口的所有抽象方法都实现</p></li><li><p>抽象类实现接口，可以不实现接口方法</p></li><li><p>一个类可以同时实现多个接口</p></li><li><p>接口中的属性是pubic static final的，属性必须初始化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//必须初始化</span>
    <span class="token comment">//相当于 public static final int a = 1;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接口不能继承类，接口可以继承接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">IB</span><span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//IC接口继承IA,IB</span>
<span class="token keyword">interface</span> <span class="token class-name">IC</span> <span class="token keyword">extends</span> <span class="token class-name">IA</span><span class="token punctuation">,</span><span class="token constant">IB</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>接口的修饰符默认是public</p></li></ol><h4 id="_7-内部类" tabindex="-1"><a class="header-anchor" href="#_7-内部类" aria-hidden="true">#</a> 7. 内部类</h4><p>局部内部类</p><ol><li><p>局部内部类是定义在外部类的局部位置，如方法中，代码块中，有类名</p></li><li><p>局部内部类本质仍是一个类，可以访问外部类的所有成员包括私有的</p></li><li><p>局部内部类只能是默认或者是final修饰符(使其不能被继承)</p></li><li><p>作用域在其方法内或代码块内</p></li><li><p>外部类访问内部类，需要在方法中可以创建内部类对象，然后调用其方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//外部类</span>
<span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//局部内部类定义在外部类的局部位置，比如方法中</span>
        <span class="token comment">//若用final修饰的内部类，则其不能被继承</span>
        <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span><span class="token comment">//局部内部类(本质仍是类)</span>
            <span class="token comment">//可以直接访问外部类的所有成员包括私有的</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
        <span class="token comment">//创建内部类对象，然后调用其方法</span>
        <span class="token class-name">Inner</span> i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        i1<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>外部其他类不能访问局部内部类 (局部内部类的地位是局部变量)</p></li><li><p>如果外部类和局部内部类的成员重名，默认遵循就近原则，</p></li><li><p>如果想访问外部类的成员则可以使用(外部类名 . this.成员)去访问</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">{</span><span class="token comment">//外部类</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span><span class="token comment">//局部内部类</span>
            <span class="token keyword">private</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token comment">//访问n1遵循就近原则即访问的是Inner内的n1</span>
                <span class="token comment">//即输出200</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">//若想访问外部类的n1则需要外部类名.this.成员去访问</span>
                <span class="token comment">//即输出100</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><hr><p>匿名内部类</p><ol><li><p>匿名内部类是定义在外部类的局部位置，如方法中，代码块中，无类名</p><ul><li><p>基于接口的匿名内部类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//匿名内部类</span>
        <span class="token class-name">IA</span> dog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;小狗汪汪叫&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//1. dog的编译类型是 接口类型 即IA</span>
        <span class="token comment">//2. dog的运行类型是 匿名内部类</span>
        <span class="token comment">/*  底层代码为
            class Outer$1 implements IA{
                public void cry() {
                    System.out.println(&quot;小狗汪汪叫&quot;);
                }
            }
        */</span>
        <span class="token comment">//3. jdk底层在创建匿名内部类Outer$1后，立即就new了一个对象实例，并且把地址返回给dog</span>
        <span class="token comment">//4. 匿名内部类使用一次之后就不能在使用了，使用后类消失但是类所创建的对象存在</span>
        dog<span class="token punctuation">.</span><span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用dog对象实例的cry方法输出小狗汪汪叫</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">interface</span> <span class="token class-name">IA</span><span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>基于类的匿名内部类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> a1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//匿名内部类</span>
        people p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">people</span><span class="token punctuation">(</span><span class="token string">&quot;tom&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;匿名内部类重写test方法&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token comment">//1. p1的编译类型是 people类</span>
        <span class="token comment">//2. p1的运行类型是 Outer$1</span>
        <span class="token comment">/*  底层代码为
            class Outer$1 extends people{
            }
        */</span>
        <span class="token comment">//3. jdk底层在创建匿名内部类Outer$1后，立即就new了一个对象实例并且把地址返回给p1</span>
        <span class="token comment">//4. (&quot;tom&quot;)参数列表会传递给构造器</span>
        p1<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用输出&quot;匿名内部类重写test方法&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>    
<span class="token keyword">class</span> people<span class="token punctuation">{</span>
    <span class="token comment">//构造器</span>
    <span class="token keyword">public</span> <span class="token function">people</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment">//方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>可以直接访问外部类的成员，包括私有的</p></li><li><p>不能添加访问修饰符，他的地位只是一个局部变量</p></li><li><p>外部其他类不能访问匿名内部类</p></li><li><p>如果外部类和局部内部类的成员重名，默认遵循就近原则</p></li><li><p>如果想访问外部类的成员则可以使用(外部类名 . this.成员)去访问</p></li></ol><hr><p>成员内部类</p><ol><li><p>成员内部类可以访问外部类的成员包含私有的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建类</span>
    <span class="token class-name">Outer01</span> outer01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//调用f1方法</span>
    outer01<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//输出 &quot;say方法abc 100&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Outer01</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span><span class="token comment">//属性</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token comment">//成员内部类</span>
    <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//可以访问私有属性</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;say方法&quot;</span> <span class="token operator">+</span> name<span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//f1方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//创建成员内部类的对象实例</span>
        <span class="token class-name">Inner01</span> inner01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用say方法</span>
        inner01<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>可以添加任意的访问修饰符，他的地位就是一个成员</p></li><li><p>作用域为整个类体</p></li><li><p>成员内部类访问外部类的成员直接访问即可</p></li><li><p>外部类使用成员内部类需要先创建成员内部类对象再调用其方法或属性</p></li><li><p>外部其他类访问成员内部类两种方式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//--------------第一种方法--------------</span>
<span class="token class-name">Outer01<span class="token punctuation">.</span>Inner01</span> inner01 <span class="token operator">=</span> outer01<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//--------------第二种方法--------------</span>
<span class="token class-name">Outer01<span class="token punctuation">.</span>Inner01</span> inner01 <span class="token operator">=</span> outer01<span class="token punctuation">.</span><span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//编写一个方法，返回一个对象实例</span>
<span class="token keyword">public</span> <span class="token class-name">Inner01</span> <span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果外部类和局部内部类的成员重名，默认遵循就近原则，</p></li><li><p>如果想访问外部类的成员则可以使用(外部类名 . this.成员)去访问</p></li></ol><hr><p>静态内部类</p><ol><li><p>静态内部类是定义在外部类的成员位置用static修饰</p></li><li><p>可以直接访问外部类的所有成员，包含私有的，不能直接访问非静态成员</p></li><li><p>可以添加任意修饰符public protect 默认 private，他的地位就是一个成员</p></li><li><p>作用域为整个类体</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建类</span>
    <span class="token class-name">Outer01</span> outer01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//调用f1方法</span>
    outer01<span class="token punctuation">.</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//输出 &quot;say方法abc 100&quot;</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">Outer01</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">&quot;abc&quot;</span><span class="token punctuation">;</span><span class="token comment">//属性</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
	<span class="token comment">//成员内部类</span>
    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner01</span><span class="token punctuation">{</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token comment">//可以访问私有属性</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;say方法&quot;</span> <span class="token operator">+</span> name<span class="token operator">+</span> <span class="token string">&quot; &quot;</span> <span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//f1方法</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//创建成员内部类的对象实例</span>
        <span class="token class-name">Inner01</span> inner01 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//调用say方法</span>
        inner01<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>外部类访问静态内部类需要创建对象后再访问</p></li><li><p>外部其他类访问静态内部类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//--------------第一种方法--------------</span>
<span class="token class-name">Outer01<span class="token punctuation">.</span>Inner01</span> inner011 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer01<span class="token punctuation">.</span>Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//--------------第二种方法--------------</span>
<span class="token comment">//编写一个方法，返回一个对象实例</span>
<span class="token class-name">Outer01<span class="token punctuation">.</span>Inner01</span> inner <span class="token operator">=</span> <span class="token class-name">Outer01</span><span class="token punctuation">.</span><span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Inner01</span> <span class="token function">getInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Inner01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>如果外部类和局部内部类的成员重名，默认遵循就近原则，</p><p>如果想访问外部类的成员则可以使用(外部类名 . this.成员)去访问</p></li></ol><hr><h4 id="_8-枚举" tabindex="-1"><a class="header-anchor" href="#_8-枚举" aria-hidden="true">#</a> 8. 枚举</h4><ol><li><p>自定义类实现枚举</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>
    <span class="token comment">//1. 构造器私有化</span>
    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//2. 可以保留get方法，需要去掉set方法</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//3. 创建对象用public final static修饰</span>
    <span class="token comment">//4. 对象名用大写字母</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Season</span> <span class="token constant">SPRING</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;春天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;温暖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Season</span> <span class="token constant">SUMMER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;夏天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;炎热&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Season</span> <span class="token constant">AUTUMN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;秋天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;凉爽&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Season</span> <span class="token constant">WINTER</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token string">&quot;冬天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;寒冷&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//可以直接访问对象 通过Season.SPRING</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Season</span><span class="token punctuation">.</span><span class="token constant">SPRING</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>enum实现枚举</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//enum替换class 定义枚举类</span>
<span class="token keyword">enum</span> <span class="token class-name">Season</span><span class="token punctuation">{</span>
    <span class="token comment">//将对象写在最前面，中间用逗号隔开，最后一个用分号结束</span>
    <span class="token comment">//对象名(&quot;构造器属性&quot;)</span>
    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">&quot;春天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;温暖&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">&quot;夏天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;炎热&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">AUTUMN</span><span class="token punctuation">(</span><span class="token string">&quot;秋天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;凉爽&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token function">WINTER</span><span class="token punctuation">(</span><span class="token string">&quot;冬天&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;寒冷&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//属性</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> desc<span class="token punctuation">;</span>
    <span class="token comment">//构造器私有化</span>
    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">String</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>desc <span class="token operator">=</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//可以保留get方法，需要去掉set方法</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDesc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> desc<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>enum常用方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1 .ordinal() 可以输出当前枚举对象的次序(从0开始)</span>
<span class="token comment">//2 .values() 返回一个含所有枚举对象的数组</span>
<span class="token comment">//3 .valueOf() 将字符串转化成枚举对象</span>
<span class="token comment">//4 .compareTo() 比较两个枚举变量，比较编号，返回值是前者编号-后者编号例如1-2=-1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用细节</p><ul><li><p>使用enum后不能继承其他类，因为enum会隐式继承</p></li><li><p>enum和普通类一样可以实现接口</p></li></ul></li></ol><h4 id="_9-注解" tabindex="-1"><a class="header-anchor" href="#_9-注解" aria-hidden="true">#</a> 9. 注解</h4><ol><li><p>@Override 重写方法 (只能修饰方法)</p></li><li><p>@Deprecated 表示 已过时</p></li><li><p>@SuppressWarnings 忽略警告信息</p></li></ol><h4 id="_10-异常" tabindex="-1"><a class="header-anchor" href="#_10-异常" aria-hidden="true">#</a> 10. 异常</h4><ol><li><p>五大运行异常</p><ul><li><p>NullPointerException 空指针异常</p></li><li><p>ArithmeticException 数学运算异常</p></li><li><p>ArrayIndexOutOfBoundsException 数组越界异常</p></li><li><p>ClassCastException 对象强转为不是子类对象实例抛出的异常</p></li><li><p>NumberFormatException 数字格式不正常异常</p></li></ul></li><li><p>异常处理方式</p><ul><li><p>try - catch - finally</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span><span class="token punctuation">{</span>
    <span class="token comment">//可能会出现异常</span>
<span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">//当出现异常时进行捕获，封装成Exception对象e传递给catch</span>
<span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>
    <span class="token comment">//无论有没有异常finally 始终要运行</span>
    <span class="token comment">//通常用于释放资源代码</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>如果异常发生了则异常后面的代码不会执行，直接进入catch块</p></li><li><p>如果异常没有发生则顺序执行try，不会进入catch块</p></li><li><p>如果try中可能有多个异常，可以使用多个catch分别捕获不同的异常(子类异常写在前，父类异常写在后)</p></li><li><p>finally不是必须的</p></li></ol></li><li><p>throws</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//使用throws 将异常抛出，让调用f2方法的调用者处理</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
    <span class="token comment">//此为编译异常</span>
    <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">&quot;d://aa.txt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>子类重写父类方法时，子类抛出的异常要和父类的一致或者是父类异常类型的子类型</li><li>throws后面也可以是异常列表，即可以抛出多个异常 用逗号分割</li></ol></li></ul></li><li><p>自定义异常类</p><ol><li><p>继承一个异常类型</p><p>编译时异常类型：自定义类继承<code>java.lang.Exception</code>。</p><p>运行时异常类型：自定义类继承<code>java.lang.RuntimeException</code></p></li><li><p>提供至少两个构造器, 一个是无参构造, 一个是(String message)构造器</p></li><li><p>定义异常需要提供<code>serialVersionUID</code></p></li><li><p>自定义的异常只能通过throw抛出, 且只能手动抛出, 抛出后由try..catch处理，也可以让调用者处理</p></li></ol></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 自定义异常类</span>
<span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">23423423435L</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> idnumber<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">,</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>idnumber <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> idnumber<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 测试</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyExpTest</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MyException</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">&quot;人数为负值，不合理&quot;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;登记人数&quot;</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">regist</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MyException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;登记失败，出错种类&quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&quot;本次登记操作结束&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">MyExpTest</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyExpTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        t<span class="token punctuation">.</span><span class="token function">manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="第08章-常用类" tabindex="-1"><a class="header-anchor" href="#第08章-常用类" aria-hidden="true">#</a> 第08章--常用类</h3><h4 id="_1-包装类" tabindex="-1"><a class="header-anchor" href="#_1-包装类" aria-hidden="true">#</a> 1. 包装类</h4><ol><li><p>八大wrapper类</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr></tbody></table></li><li><p>基本类型与包装类的区别</p><ul><li>用途：除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且，包装类型可用于泛型，而基本类型不可以。</li><li>存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 <code>static</code> 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。</li><li>占用空间：相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。</li><li>默认值：成员变量包装类型不赋值就是 <code>null</code> ，而基本类型有默认值且不是 <code>null</code>。</li><li>比较方式：对于基本数据类型来说，<code>==</code> 比较的是值。对于包装数据类型来说，<code>==</code> 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 <code>equals()</code> 方法。</li></ul><p>⚠️ 注意：<strong>基本数据类型存放在栈中是一个常见的误区！</strong> 基本数据类型的成员变量如果没有被 <code>static</code> 修饰的话（不建议这么使用，应该要使用基本数据类型对应的包装类型），就存放在堆中。</p></li></ol><h4 id="_2-string类" tabindex="-1"><a class="header-anchor" href="#_2-string类" aria-hidden="true">#</a> 2. String类</h4><ol><li><p>字符串与其他类型之间的转换</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1. 包装类 -&gt; String</span>
<span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
<span class="token comment">//方式一</span>
<span class="token class-name">String</span> str1 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//方式二</span>
<span class="token class-name">String</span> str2 <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//方式三</span>
<span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//2. String -&gt; 包装类</span>
<span class="token class-name">String</span> str4 <span class="token operator">=</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//方式一</span>
<span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动装箱</span>
<span class="token comment">//方式二</span>
<span class="token class-name">Integer</span> i3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构造器</span>

<span class="token comment">//3. 字符数组 -&gt; 字符串</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token char">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;b&#39;</span><span class="token punctuation">,</span><span class="token char">&#39;c&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//可以标记起始位置和长度</span>
<span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//4. 字符串 -&gt; 字符数组</span>
<span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>常用方法</p><ul><li>boolean isEmpty()：字符串是否为空</li><li>int length()：返回字符串的长度</li><li>String concat(xx)：拼接</li><li>boolean equals(Object obj)：比较字符串是否相等，区分大小写</li><li>boolean equalsIgnoreCase(Object obj)：比较字符串是否相等，不区分大小写</li><li>String toLowerCase()：将字符串中大写字母转为小写</li><li>String toUpperCase()：将字符串中小写字母转为大写</li><li>String trim()：去掉字符串前后空白符</li><li>boolean contains(xx)：是否包含xx</li><li>int indexOf(xx)：从前往后找当前字符串中xx，即如果有返回第一次出现的下标，要是没有返回-1</li><li>int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</li><li>int lastIndexOf(xx)：从后往前找当前字符串中xx，即如果有返回最后一次出现的下标，要是没有返回-1</li><li>int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引反向搜索</li><li>String substring(int beginIndex) ：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串</li><li>String substring(int beginIndex, int endIndex) ：返回一个新字符串，从beginIndex开始截取到endIndex(不包含)</li><li>char charAt(index)：返回[index]位置的字符</li><li>char[] toCharArray()： 将此字符串转换为一个新的字符数组返回</li><li>static String valueOf(char[] data) ：返回指定数组中表示该字符序列的 String</li><li>static String valueOf(char[] data, int offset, int count) ： 返回指定数组中表示该字符序列的 String</li><li>static String copyValueOf(char[] data)： 返回指定数组中表示该字符序列的 String</li><li>static String copyValueOf(char[] data, int offset, int count)：返回指定数组中表示该字符序列的 String</li><li>String replace(char oldChar, char newChar)：返回新字符串，用newChar替换所有 oldChar, 不支持正则</li><li>String replaceAll(String regex, String replacement)：使用给定的 replacement 替换所有匹配给定的正则表达式的子字符串</li></ul></li><li><p>StringBuffer常用方法</p><ul><li>StringBuffer append(xx)：提供了很多的append()方法，用于进行字符串追加的方式拼接</li><li>StringBuffer delete(int start, int end)：删除[start,end)之间字符</li><li>StringBuffer deleteCharAt(int index)：删除[index]位置字符</li><li>StringBuffer replace(int start, int end, String str)：替换[start,end)范围的字符序列为str</li><li>void setCharAt(int index, char c)：替换[index]位置字符</li><li>char charAt(int index)：查找指定index位置上的字符</li><li>StringBuffer insert(int index, xx)：在[index]位置插入xx</li><li>int length()：返回存储的字符数据的长度</li><li>StringBuffer reverse()：反转</li></ul></li><li><p>StringBuilder方法</p><p>和StringBuffer方法一样，在单线程中更推荐StringBuilder方法</p><p>而在多线程中使用StringBuilder方法会导致线程不安全</p></li></ol><h4 id="_3-arrays类" tabindex="-1"><a class="header-anchor" href="#_3-arrays类" aria-hidden="true">#</a> 3. Arrays类</h4><ol><li><p>Arrays.toString 返回数组的字符串形式</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出形如[1,5,8,2]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Arrays.sort 排序</p><p>(1) 升序</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//直接在原数组上进行排序</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>(2) 降序</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>o1<span class="token punctuation">;</span>
        <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">)</span>o2<span class="token punctuation">;</span>
        <span class="token comment">//若i2-i1则为降序</span>
        <span class="token comment">//若i1-i2则为升序</span>
        <span class="token keyword">return</span> i2<span class="token operator">-</span>i1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Arrays.binarySearch 二分查找指定元素</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//arr数组必须是排好序的</span>
<span class="token comment">//在arr数组中查找元素1若有则返回下标值，若无则返回此元素应该在的位置的-(low+1)</span>
<span class="token class-name">Integer</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 2</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 -(0+1) = -1</span>
<span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回 -(6+1) = -7</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Arrays.copyOf 数组复制</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//将arr数组的元素中arr.length的长度复制到新数组arr2中</span>
<span class="token comment">//长度比arr小则会省去后面的元素</span>
<span class="token comment">//长度比arr大则会添加null</span>
<span class="token class-name">Integer</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr2 <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出arr和arr2数组元素内容相同</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="_4-system类" tabindex="-1"><a class="header-anchor" href="#_4-system类" aria-hidden="true">#</a> 4. System类</h4><ol><li><p>exit() 退出当前程序</p><p>System.exit(0)；代表正常退出</p></li><li><p>arraycopy() 数组复制</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//源数组</span>
<span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//需要复制的数组</span>
<span class="token comment">//array.copy(源数组, 从源数组的索引位置开始复制, 需要复制到的数组, 被复制的数组开始复制的位置，复制的长度)</span>
<span class="token comment">//通常全部复制用以下形式</span>
<span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr2<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出[1,2,3]</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>currentTimeMillis() 返回从1970.1.1到现在的时间毫秒值</p></li><li><p>Scanner键盘输入</p><ol><li>创建Scanner类型的对象：<code>Scanner scan = new Scanner(System.in);</code></li><li>调用Scanner类的相关方法（<code>next() / nextXxx()</code>），来获取指定类型的变量</li><li>释放资源：<code>scan.close();</code></li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScannerTest1</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建Scanner类型的对象</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.in默认代表键盘输入</span>
        <span class="token comment">//调用Scanner的方法，获取不同类型的变量</span>
        <span class="token class-name">String</span> name <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> age <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">double</span> weight <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">boolean</span> isSingle <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">char</span> gender <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 关闭资源</span>
        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="_5-math类" tabindex="-1"><a class="header-anchor" href="#_5-math类" aria-hidden="true">#</a> 5. Math类</h4><ol><li><p>常用Math方法</p><ul><li>public static double abs(double a) ：返回 double 值的绝对值。</li><li>public static double ceil(double a) ：返回大于等于参数的最小的整数。</li><li>public static double floor(double a) ：返回小于等于参数最大的整数。</li><li>public static long round(double a) ：返回最接近参数的 long。(相当于四舍五入方法)</li><li>public static double pow(double a,double b)：返回a的b幂次方法</li><li>public static double sqrt(double a)：返回a的平方根</li><li>public static double random()：返回[0,1)的随机值</li><li>public static final double PI：返回圆周率</li><li>public static double max(double x, double y)：返回x,y中的最大值</li><li>public static double min(double x, double y)：返回x,y中的最小值</li><li>acos,asin,atan,cos,sin,tan 三角函数</li></ul></li><li><p>BigInteger类</p><p>构造器</p><ul><li>BigInteger(String val)：根据字符串构建BigInteger对象</li></ul><p>方法</p><ul><li>public BigInteger abs()：绝对值</li><li>BigInteger add(BigInteger val) ：加法运算</li><li>BigInteger subtract(BigInteger val) ：减法运算</li><li>BigInteger multiply(BigInteger val) ：乘法运算</li><li>BigInteger divide(BigInteger val) ：除法运算, 整数相除只保留整数部分</li><li>BigInteger remainder(BigInteger val) ：取余运算</li><li>BigInteger[] divideAndRemainder(BigInteger val)：返回包含除法运算后跟取余运算的两个 BigInteger 的数组</li><li>BigInteger pow(int exponent) ：幂指运算</li></ul></li><li><p>BigDecimal</p><p>构造器</p><ul><li><p>public BigDecimal(double val)</p></li><li><p>public BigDecimal(String val) --&gt; 推荐</p></li></ul><p>常用方法</p><ul><li><p>public BigDecimal add(BigDecimal augend)：加法运算</p></li><li><p>public BigDecimal subtract(BigDecimal subtrahend)：减法运算</p></li><li><p>public BigDecimal multiply(BigDecimal multiplicand)：乘法运算</p></li><li><p>public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)：divisor是除数，scale指明保留几位小数，roundingMode指明舍入模式（ROUND_UP :向上加1、ROUND_DOWN :直接舍去、ROUND_HALF_UP:四舍五入）</p></li></ul></li><li><p>Random类</p><p>常用方法</p><ul><li>boolean nextBoolean():返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的 boolean 值。</li><li>void nextBytes(byte[] bytes):生成随机字节并将其置于用户提供的 byte 数组中。</li><li>double nextDouble():返回下一个伪随机数，它是取自此随机数生成器序列的、在 0.0 和 1.0 之间均匀分布的 double 值。</li><li>float nextFloat():返回下一个伪随机数，它是取自此随机数生成器序列的、在 0.0 和 1.0 之间均匀分布的 float 值。</li><li>int nextInt():返回下一个伪随机数，它是此随机数生成器的序列中均匀分布的 int 值。</li><li>int nextInt(int n):返回一个伪随机数，它是取自此随机数生成器序列的、在 [0,n) 之间均匀分布的 int 值。</li><li>long nextLong():返回下一个伪随机数，它是取自此随机数生成器序列的均匀分布的 long 值。</li></ul></li></ol><h4 id="_6-日期类" tabindex="-1"><a class="header-anchor" href="#_6-日期类" aria-hidden="true">#</a> 6. 日期类</h4><ol><li><p>Date类</p><p>构造器</p><ul><li>Date()：使用无参构造器创建的对象可以获取本地当前时间。</li><li>Date(long 毫秒数)：把该毫秒值换算成日期时间对象</li></ul><p>常用方法</p><ul><li>getTime(): 返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//获取当前系统时间</span>
<span class="token class-name">Date</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//日期格式化</span>
<span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy年MM月dd日 HH时mm分ss秒 SSS毫秒  E Z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//输出结果: 2023年07月16日 11时10分53秒 500毫秒  周日 +0800</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Calendar类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//创建Calendar类</span>
<span class="token class-name">Calendar</span> c <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//格式需要自己处理</span>
<span class="token comment">//获取日期信息</span>
c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">YEAR</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//年</span>
c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MONTH</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//月，从0开始计数</span>
c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">DAY_OF_MONTH</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//日</span>
c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">HOUR</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//时</span>
c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">MINUTE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//分</span>
c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token constant">SECOND</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//秒</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>Time类</p><p>本地日期时间类 LocalDate、LocalTime、LocalDateTime</p><p>常用方法</p><ul><li>now() / now(ZoneId zone): 静态方法，根据当前时间创建对象/指定时区的对象</li><li>of(): 静态方法，根据指定日期/时间创建对象</li><li>getDayOfMonth(): 获得月份天数</li><li>getMonth(): 获得月份</li><li>plusDays(): 向当前对象添加几天</li><li>minusDays(): 从当前对象减少几天</li><li>plus(TemporalAmount t): 添加一个Duration 或 Period</li><li>isBefore() / isAfter(): 比较两个LocalDate</li><li>isLeapYear(): 判断是否闰年</li><li>format(DateTimeFormatter t): 格式化本地日期、时间，返回一个字符串</li><li>parse(Charsequence text): 将指定格式的字符串解析为日期、时间</li><li>ofPattern(&quot;yyyy-MM-dd hh:mm:ss&quot;): 自定义格式, 返回一个指定字符串格式的DateTimeFormatter</li><li>Period.between(t1, t2): 计算两个日期间隔</li><li>Duration.between(t1, t2): 用于计算两个时间间隔</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">timeTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">DateTimeFormatter</span> dateTimeFormatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd hh:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dateTimeFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol>`,137);function v(m,b){const a=l("ExternalLinkIcon");return c(),i("div",null,[u,n("p",null,[s("JDK8在线文档: "),n("a",d,[s("https://docs.oracle.com/javase/8/docs/api/"),e(a)])]),n("p",null,[s("JDK17在线文档: "),n("a",r,[s("https://docs.oracle.com/en/java/javase/17/docs/api/index.html"),e(a)])]),k])}const y=p(o,[["render",v],["__file","JavaNote2.html.vue"]]);export{y as default};
